---------------Instalación de Python en Linux---------------

apt-get update -y
apt-get install -y python3.6
apt-get install -y python3.6-dev
apt-get install -y python3.6-distutils


## Verificación de la descarga

1. Correr `python3 --version`
2. Correr `pip3 --version`


## Entorno virtual

1. Correr python3 -m venv ENTORNO donde `ENTORNO` sea el nombre deseado
2. Correr source ENTORNO/bin/activate para activar el entorno
3. Correr deactivate para desactivar el entorno

## Instalación de django

1. Activar entorno virtual
2. Correr pip install django -U}

--------------- Creación del proyecto "Platzigram" / tu primer Hola, mundo! en Django---------------
comando 'django-admin': Es una interfaz con el framework de django que nos permite ejecutar otro sub-comandos.
comando 'django-admin startproject nombre_proyect path: comando para crear un nuevo proyecto, 
	ejemplo:
		django-admin startproject platzigram . 
		##el "." significa que se creará en la ruta actual.

Estructura de Archivos:

    El archivo vacío init.py indica que la carpeta es un módulo de python.
    El archivo settings.py define todas las configuraciones del proyecto.
        BASE_DIR: Define la ubicación donde se está corriendo el proyecto.
        SECRET_KEY: Es usado para el hashing de las contraseñas y las sesiones que se almacenan en la BD.
        DEBUG: Define si el proyecto está en desarrollo para realizar debugging.
        ALLOWED_HOSTS: Define que hosts están permitidos para que interactuen en nuestro proyecto.
        INSTALLED_APPS: Aplicaciones ligadas al proyecto. Por defecto agrega la app de administrador, autenticación, contentypes (conexión a la BD), sesiones, mensajes y archivos estáticos.
        MIDDLEWARE:
        ROOT_URLCONF: Ubicación del principal de urls.
        TEMPLATES:
        WSGI_APPLICATION: Ubicación del principal de deployment.
        DATABASES: Configuración y conexión a la BD.
        AUTH_PASSWORD_VALIDATORS: Validadores de contraseñas. Si se está usando la app de autenticación, que la contraseña pase por las validaciones definidas:
            Los valores de la contraseña no sean similares a los valores del usuario.
            Que tenga una mínima longitud.
            Validar la contraseña con un diccionario de contraseñas comunes.
            Que la contraseña no sea numérica.
        LANGUAGE_CODE: Lenguaje o idioma que está utilizando la aplicación.
        TIME_ZONE: Se define el sistema horario en donde está corriendo la aplicación.
        USE_I18N: Librería para traducción de textos.
        USE_L10N: Librería para traducción de textos.
        USE_TZ: Librería de timezone.
        STATIC_URL: Define la ubicación de los archivos estáticos como css, js, img.
    El archivo urls.py define el punto de entrada para todas las peticiones que lleguen al proyecto.
    El archivo wsgi.py es utilizado para el deployment a producción.
    El archivo manage.py es uno que no se debe tocar y permite ejecutar todos los comandos que se hayan definido en las applicaciones instaladas del proyecto (entre ellas las del comando django-admin).
        Cuando se ejecuta python3 manage.py por cada [nombre_app] se visualizarán los diferentes comandos que se pueden ejecutar por cada aplicación instalada del proyecto (auth, contenttypes, django, sessions, staticfiles).


