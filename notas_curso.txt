---------------Instalación de Python, pip y Django en Linux---------------

apt-get update -y
apt-get install -y python3.6
apt-get install -y python3.6-dev
apt-get install -y python3.6-distutils


## Verificación de la descarga

1. Correr `python3 --version`
2. Correr `pip3 --version`


## Entorno virtual

1. Correr python3 -m venv ENTORNO donde `ENTORNO` sea el nombre deseado
2. Correr source ENTORNO/bin/activate para activar el entorno
3. Correr deactivate para desactivar el entorno

## Instalación de django

1. Activar entorno virtual
2. Correr pip install django -U

--------------- Creación del proyecto "Platzigram" / tu primer Hola, mundo! en Django---------------
comando 'django-admin': Es una interfaz con el framework de django que nos permite ejecutar otro sub-comandos.
comando 'django-admin startproject nombre_proyect path: comando para crear un nuevo proyecto, 
	ejemplo:
		django-admin startproject platzigram . 
		##el "." significa que se creará en la ruta actual.

Estructura de Archivos:

    El archivo vacío init.py indica que la carpeta es un módulo de python.
    El archivo settings.py define todas las configuraciones del proyecto.
        BASE_DIR: Define la ubicación donde se está corriendo el proyecto.
        SECRET_KEY: Es usado para el hashing de las contraseñas y las sesiones que se almacenan en la BD.
        DEBUG: Define si el proyecto está en desarrollo para realizar debugging.
        ALLOWED_HOSTS: Define que hosts están permitidos para que interactuen en nuestro proyecto.
        INSTALLED_APPS: Aplicaciones ligadas al proyecto. Por defecto agrega la app de administrador, autenticación, contentypes (conexión a la BD), sesiones, mensajes y archivos estáticos.
        MIDDLEWARE:
        ROOT_URLCONF: Ubicación del principal de urls.
        TEMPLATES:
        WSGI_APPLICATION: Ubicación del principal de deployment.
        DATABASES: Configuración y conexión a la BD.
        AUTH_PASSWORD_VALIDATORS: Validadores de contraseñas. Si se está usando la app de autenticación, que la contraseña pase por las validaciones definidas:
            Los valores de la contraseña no sean similares a los valores del usuario.
            Que tenga una mínima longitud.
            Validar la contraseña con un diccionario de contraseñas comunes.
            Que la contraseña no sea numérica.
        LANGUAGE_CODE: Lenguaje o idioma que está utilizando la aplicación.
        TIME_ZONE: Se define el sistema horario en donde está corriendo la aplicación.
        USE_I18N: Librería para traducción de textos.
        USE_L10N: Librería para traducción de textos.
        USE_TZ: Librería de timezone.
        STATIC_URL: Define la ubicación de los archivos estáticos como css, js, img.
    El archivo urls.py define el punto de entrada para todas las peticiones que lleguen al proyecto.
    El archivo wsgi.py es utilizado para el deployment a producción.
    El archivo manage.py es uno que no se debe tocar y permite ejecutar todos los comandos que se hayan definido en las applicaciones instaladas del proyecto (entre ellas las del comando django-admin).
        Cuando se ejecuta python3 manage.py por cada [nombre_app] se visualizarán los diferentes comandos que se pueden ejecutar por cada aplicación instalada del proyecto (auth, contenttypes, django, sessions, staticfiles).

debugger:
    para la ejecución de nuestro programa hasta que nosotros le digamos que continue (presionando la tecla c)
    import pdb; pdb.set_trace()

pasar argumentros a través de la URL:
    ejemplo:
        http://localhost:8000/hi/?numbers=10,4,15,32
        se utiliza el caracter '?' para pasar argumentos

    otra forma de pasar argumentos es definiendo los argumentos que vas a recibir desde tu path en urls.py
    ejemplo:
        path('hi/<str:name>/<int:age>/', views.say_hi),
        y se pasarian de la siguiente manera en el url:
        http://localhost:8000/hi/Yiri/11/

-----------------------Creación de Aplicaciones------------------
La manera de crear una aplicación dentro de Django es usando el comando manage.py startapp seguido del nombre de la aplicación que queremos crear
ejemplo:
    python3 manage.py startapp nombre_app

Las apps se definen en el archivo settings.py
--------------------- Template system ---------------------
Es una manera de presentar los datos usando HTML
    repaso:
        URL's; Son las encargadas de encontrar el recurso
        views: Encargada de la lógica de traer los datos
    Entonces el template es lo que se encarga de la lógica de presentar los datos

Los templates se definen en el archivo settings.py 
Para comenzar a usar los templates tienes que crear una carpeta "templates" dentro de la carpeta de tu aplicación

Dentro de los templates podemos escribir lógica de python, para hacerlo hay que escribir entre llaves y signos de porcentaje.
    Ejemplo:
        {% for post in posts %}
            <p>{{post.title}}</p>
        {% endfor %}
        Notas del ejemplo:
            Los valores de tus variables en tu vista se pasan a través de doble llave
            Los ciclos e if tienen que ser terminados 
    
    Ejemplo más completo con bootstrap:
    #Este ejemplo recorre un diccionario "posts" para mostrar sus valores.
        <div class="container">
        <div class="row">
            {% for post in posts %}
                <div class="col-lg-4 offset-lg-4">
                    <div class="media">
                        <img class="mr-3 rounded-circle" src="{{post.user.picture}}" alt="post.user.name">
                        <div class="media-body">
                            <h5 class="mt-0">{{post.user.name}}</h5>
                            {{post.timestamp}}
                        </div>
                    </div>
                    <img class="img-fluid mt-3 border rounded" src="{{post.photo}}" alt="post.title">
                    <h6 class="ml-1 mt-1">{{ post.title }}</h6>
                </div>
            {% endfor %}
        </div>
    </div>

--------------------------Patrones de diseño y Django--------------------------
Soluciones reutilizables para un problema común.

Model template view:
Model: Define la estructura de los datos
Template: Lógica de presentación de datos
View: Encargado de traer los datos y pasarlos al template
    MTV => MVC:
        Views + Urls => Controller
        Templates => View
        Models => Model

------------------------- Migraciones en nuestra base de datos -------------------------
Para correr los cambios que existen y no se han ejecutado los cambios de las migraciones en nuestra base dedatos corremos el siguiente comando:
 python3 manage.py migrate

makemigrations: va a buscar los cambios en los modelos y los va a reflejar en un archivo.
migrate: Va a aplicar los cambios de makemigrations en nuestra base de datos.

------------------------ El ORM de python -------------------------
La manera de grabar datos en nuestro modelo es utilizando la abstracción de clases.

Para acceder al shell de python con las librerias de  Django se utiliza el siguiente comando:
python3 manage.py shell

guardar datos al modelo utilizando create:
    #Donde User es la clase, anteriormente se tuvo que importar con from posts.models import User
    miguel = User.objects.create(
        email='hola@gmail.com',
        password='123456',
        first_name='Miguel',
        last_name='Valdez'
    )

para actualizar valores se puede actualizar desde la clase y posteriormente correr 'save()'

Otra manera de crear datos es instanciando la clase.
    Ejemplo:
    #El metodo save guarda los datos de tu instancia en el modelo
    sesitar = User()
    sesitar.first_name = 'Cesar'
    sesitar.last_name = 'Yamamoto'
    sesitar.save()

*** NOTA: Para elimiar datos del modelo se utiliza el metodo .delete()

Query patra consultar todos los objetos de una tabla:
>>> usuarios = User.objects.all()
>>> usuarios

query para consultar solo un objeto:
>>> usuario = User.objects.get(email='hola@gmail.com')
>>> usuario

*** NOTA: Se utiliza filter() para traer varios objetos que coincidan con un filtro, por ejemplo objeto = Clase.objetcs.filter(email__endswith='@gmail.com')
        *********** Para más información revisar documentación*********
        https://docs.djangoproject.com/en/3.1/topics/db/queries/


++++++++++++++++++++ GLOSARIO ++++++++++++++++++++++
    ORM: Object-relational mapping. Es el encargado de permitir
    el acceso y control de una base de datos relacional a través de
    una abstracción a clases y objetos.

    Templates: Archivos HTML que permiten la inclusión y ejecución
    de lógica especial para la presentación de datos.

    Modelo: Parte de un proyecto de Django que se encarga de estructurar
    las tablas y propiedades de la base de datos a través de clases de Python.

    Vista: Parte de un proyecto de Django que se encarga de la
    lógica de negocio y es la conexión entre el template y el modelo.

    App: Conjunto de código que se encarga de resolver una parte
    muy específica del proyecto, contiene sus modelos, vistas, urls, etc.

    Patrón de diseño: Solución común a un problema particular.
++++++++++++++++++++++++++++++++++++++++++++++++++++++



